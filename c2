#!/usr/bin/env bash
# Heavily uses bashisms, do not port to POSIX sh

log () {
	local level ansi

	level="${1}"
	shift
	case "${level}" in
		(critical) ansi="41;30" ;;
		(fatal) ansi="41;30" ;;
		(err) ansi="31" ;;
		(warn) ansi="33" ;;
		(info) ansi="34" ;;
		(debug) ansi="90" ;;
		(*) ansi="45;30" ;;
	esac
	printf "\033[${ansi}m%s: %s: %s: %s\033[m\n" "${0}" "${FUNCNAME[2]}" "${BASH_LINENO[1]}" "$*" >&2
} && export -f log

critical () { log critical "${@}"; } && export -f critical 
fatal () { log fatal "${@}"; } && export -f fatal 
err () { log err "${@}"; } && export -f err 
warn () { log warn "${@}"; } && export -f warn 
info () { log info "${@}"; } && export -f info 
debug () { log debug "${@}"; } && export -f debug 
_grey () { printf '\033[90m' >&2; } && export -f _grey 
_rst () { printf '\033[m' >&2; } && export -f _rst 

# Usage:
# if logif -1; then hide; fi # never show this specific diagnostic
# if logif 0; then debug; fi # show all diagnostics
# if logif 1; then info; fi
# if logif 2; then warning; fi
# if logif 3; then error; fi # only show error and fatal diagnostics
# if logif 4; then fatal; fi # only show fatal diagnostics
# if logif 999; then critical; fi # always this specific diagnostic
logif () {
	local required_loglevel

	required_loglevel="${1}"
	[ -n "${required_loglevel}" ] || required_loglevel="999" # if not providing a parameter, always log
	[ "${LOGLEVEL}" -le "${required_loglevel}" ]
} && export -f logif

# Remove temporary directory and cd back to a sane place
_cleanup () {
	printf '\n'
	if logif 0
	then
		logif 2 && warn "Cleaning up..."
		_grey
			cd /
			rm -rfv -- "${tmpdir}" |& xargs || { logif 3 && err "error deleting tmpdir"; }
			cd -- "${orig_dir}" || cd || cd -- "${HOME}" || cd -- ~ || pwd
		_rst
	fi
	logif 2 && warn "Exiting"
}

# Override git command to make it LOGLEVEL aware
_git () {
	local subcomand
	declare -i status

	status="0"
	subcomand="${1}"
	[ -n "${subcomand}" ] || { git; return 1; }
	shift
	if logif 0
	then
		_grey
			1>&2 git "${subcomand}" "${@}" ; status="${?}"
		_rst
		return "${status}"
	else
		2>/dev/null 1>&2 git "${subcomand}" "${@}" ; status="${?}"
		return "${status}"
	fi
} && export -f _git

_check_ref () {
	_git ls-remote --heads --exit-code c2 -- "${1}"
}

init () {
	trap _cleanup EXIT
	hash -r

	export LOGLEVEL="$((LOGLEVEL + 0))"
	export C2="git@vogsphere.42berlin.de:vogsphere/intra-uuid-17a60d50-65e8-4462-b546-c09f7a20c21c-5663399-tischmid"
	export POLL_RATE="5"
	unset CDPATH

	export tmpdir="$(mktemp -d -p /tmp .gitc2beaconXXXXXXXXX)" || { logif 4 && fatal "error creating tmpdir"; exit 1; }
	export orig_dir="$(pwd)" || { logif 3 && err "error saving original dir"; }
	cd -- "${tmpdir}" || { logif 4 && fatal "error changing to tmpdir"; exit 1; }

	_git init
	_git remote add c2 -- "${C2}"

	_git fetch --all
	for remote in $(git branch --remotes | grep -v /HEAD)
	do
		_git checkout --track "${remote}"
	done

	if _check_ref c2
	then
		_git checkout c2
		_git pull c2 c2
		_git switch c2
	else
		_git checkout --orphan c2 || _git checkout -b c2 || _git checkout c2
	fi
	_git reset --hard

	[ "$(git branch --show-current)" = "c2" ] || { logif 4 && fatal "Failed to be on 'c2' branch! Exiting"; exit 1; }
	if logif 0
	then
		_grey
			pwd
			ls -al
			printf '%s\n' "${PWD@A}"
			printf '%s\n' "${C2@A}"
			printf '%s\n' "${POLL_RATE@A}"
			printf '\n'
		_rst
	fi
}

_gitc2-sync-beacons () {
	local remote

	_git fetch --all
	for remote in $(git branch --remotes | grep -v /HEAD)
	do
		_git checkout --track "${remote}"
	done
} && export -f _gitc2-sync-beacons

gitc2-list-beacons () {
	_gitc2-sync-beacons
	git branch --format='%(refname:short)' | grep '^beacon-'
} && export -f gitc2-list-beacons

_gitc2-parse-beacons () {
	local send_all
	declare -a beacons=()

	send_all="0"
	while [ "${#}" -gt "0" ]
	do
		beacons+=("${1}")
		[ "${1}" = "all" ] && { send_all="1"; break; }
		shift
	done
	[ "${send_all}" = "1" ] && mapfile -t beacons < <(gitc2-list-beacons)
	printf '%s\n' "${beacons[@]}"
} && export -f _gitc2-parse-beacons

gitc2-init () {
	err 'Are you sure you want to init the c2 infrastructure? (CTRL-C to abort, enter to continue) '
	read
	_git checkout c2
	GIT_AUTHOR_NAME="in" GIT_AUTHOR_EMAIL="0" \
		_git commit --allow-empty --message="hostname; whoami"
	logif 1 && warn "c2: commiting command (0): 'whoami'"
	_git push c2 c2
} && export -f gitc2-init

gitc2-purge () {
	critical 'Are you sure you want to PURGE the c2 infrastructure? (CTRL-C to abort, enter to continue) '
	read
	critical '100% sure? (CTRL-C to abort, enter to continue)'
	read
	_git checkout --orphan "$(mktemp -u)"
	git branch --all --format='%(refname:short)' | grep / | grep -v HEAD | sed -e 's|/| :|; s/^/git push --force /' | bash
	git branch --all --format='%(refname:short)' | grep -v / | sed -e 's/^/git branch -D /' | bash
	_git checkout c2 || _git checkout --orphan c2 || _git checkout -b c2
	gitc2-init
} && export -f gitc2-purge

gitc2-run () {
	local cmd cmd_id beacon
	declare -a beacons=()

	cmd="${1}"
	[ -n "${cmd}" ] && [ -n "${2}" ] || { warn "Usage: gitc2-run CMD BEACON [BEACON...]"; return 1; }
	shift
	mapfile -t beacons < <(_gitc2-parse-beacons "${@}")
	_gitc2-sync-beacons
	for beacon in "${beacons[@]}"
	do
		_git checkout c2
		_git checkout -b "${beacon}" || _git checkout "${beacon}"
		cmd_id="$(git log --author=in --format=%ae | sort -nr | head -1)"
		cmd_id="$((cmd_id + 1))"
		_git pull --rebase c2 "${beacon}"
		GIT_AUTHOR_NAME="in" GIT_AUTHOR_EMAIL="${cmd_id}" \
			_git commit --allow-empty --message="${cmd}"
		logif 1 && warn "Beacon '${beacon}': commiting command (${cmd_id}): '${cmd}'"
	done
	# _git push c2 "${beacon}"
	logif 1 && warn "Pushing to all beacons..."
	_git push c2 --all
} && export -f gitc2-run

gitc2-volume () {
	local vol_perc

	vol_perc="${1}"
	[ -n "${vol_perc}" ] || {  warn "Usage: gitc2-volume PERCENTAGE BEACON [BEACON...]"; return 1; }
	shift
	gitc2-run "pactl set-sink-mute @DEFAULT_SINK@ false; pactl set-sink-volume @DEFAULT_SINK@ '${vol_perc}%'" "${@}"
} && export -f gitc2-volume

gitc2-brightness () {
	local bright_perc bright_frac

	bright_perc="${1}"
	[ -n "${bright_perc}" ] || {  warn "Usage: gitc2-brightness PERCENTAGE BEACON [BEACON...]"; return 1; }
	shift
	bright_frac="$(echo "scale=2; ${bright_perc}/100" | bc)"
	gitc2-run "xrandr --output HDMI-2 --brightness '${bright_frac}'" "${@}"
} && export -f gitc2-brightness

gitc2-full-physical-brightness () {
	gitc2-run 'for _ in {1..25}; do LD_LIBRARY_PATH="." ./xdotool key XF86MonBrightnessUp; done' "${@}"
} && export -f gitc2-full-physical-brightness

gitc2-low-physical-brightness () {
	gitc2-run 'for _ in {1..25}; do LD_LIBRARY_PATH="." ./xdotool key XF86MonBrightnessDown; done' "${@}"
} && export -f gitc2-low-physical-brightness

gitc2-stage-file () {
	local file_path file_name
	declare -a beacons=()

	file_path="${1}"
	[ -n "${file_path}" ] && [ -n "${2}" ] || { warn "Usage: gitc2-stage-file FILE_PATH BEACON [BEACON...]"; return 1; }
	[ -f "${file_path}" ] && [ -r "${file_path}" ] || { err "Error, file '${file_path}' is not accessible"; return 1; }
	file_name="$(basename -- "${file_path}")"
	shift
	mapfile -t beacons < <(_gitc2-parse-beacons "${@}")

	_git checkout c2
	cp --force "${file_path}" .
	_git add --force "${file_name}"
	_git commit --allow-empty --message="Add '${file_name}'"

	_gitc2-sync-beacons
	for beacon in "${beacons[@]}"
	do
		_git checkout -b "${beacon}" || _git checkout "${beacon}"
		_git pull c2 "${beacon}"
		_git merge --no-edit c2
		logif 1 && warn "Beacon '${beacon}': staged file: '${file_name}' (will be pushed on next command)"
	done
	_git checkout c2
} && export -f gitc2-stage-file

# TODO: Add completions
inject_env () {
	echo 'alias lb="gitc2-list-beacons"'
	echo 'alias r="gitc2-run"'
	echo 'alias v="gitc2-volume"'
	echo 'alias b="gitc2-brightness"'
	echo 'alias b="gitc2-brightness"'
	echo 'alias pfb="gitc2-full-physical-brightness"'
	echo 'alias plb="gitc2-low-physical-brightness"'
	echo 'alias sf="gitc2-stage-file"'
	echo 'readonly PS1="(gitc2) ${PS1}"'
	echo "readonly GITC2_ID='$$'"
}

main () {
	init "${@}"
	logif 1 && {
		info "You are in an interactive bash shell."
		info "The following shell functions are available:"
		info $'\t'"- gitc2-list-beacons [--terse|-t]"
		info $'\t'"- gitc2-run CMD BEACON [BEACON...]"
		info $'\t'"- gitc2-volume PERCENTAGE BEACON [BEACON...]"
		info $'\t'"- gitc2-brightness PERCENTAGE BEACON [BEACON...]"
		info $'\t'"- gitc2-full-physical-brightness BEACON [BEACON...]"
		info $'\t'"- gitc2-low-physical-brightness BEACON [BEACON...]"
		info $'\t'"- gitc2-stage-file FILE_PATH BEACON [BEACON...]"
		info $'\t'"- Arguments:"
		info $'\t\t'"- BEACON: either a beacon id (must start with 'beacon-') or 'all' selecting all beacons (no syntax yet to deselect beacons from 'all')."
		info "Additionally, the following aliases are available:"
		info $'\t'"- lb='gitc2-list-beacons'"
		info $'\t'"- r='gitc2-run'"
		info $'\t'"- v='gitc2-volume'"
		info $'\t'"- b='gitc2-brightness'"
		info $'\t'"- pfb='gitc2-full-physical-brightness'"
		info $'\t'"- plb='gitc2-low-physical-brightness'"
		info $'\t'"- sf='gitc2-stage-file'"
		warn "Note that gitc2-volume and gitc2-brightness are just convenience functions that call xrandr and pactl respectively"
	}
	bash --rcfile <(2>/dev/null cat ~/.bashrc; inject_env) -i
}

main "${@}"
